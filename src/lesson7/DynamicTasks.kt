@file:Suppress("UNUSED_PARAMETER")

package lesson7

import kotlin.math.max

/**
 * Наибольшая общая подпоследовательность.
 * Средняя
 *
 * Дано две строки, например "nematode knowledge" и "empty bottle".
 * Найти их самую длинную общую подпоследовательность -- в примере это "emt ole".
 * Подпоследовательность отличается от подстроки тем, что её символы не обязаны идти подряд
 * (но по-прежнему должны быть расположены в исходной строке в том же порядке).
 * Если общей подпоследовательности нет, вернуть пустую строку.
 * Если есть несколько самых длинных общих подпоследовательностей, вернуть любую из них.
 * При сравнении подстрок, регистр символов *имеет* значение.
 */
//Трудоемкость - O(m*n)
//Ресурсоемкость - O(m*n), где m и n - длины первой и второй строк соответственно
fun longestCommonSubSequence(first: String, second: String): String {
    val m = first.length
    val n = second.length
    val table = mutableListOf<MutableList<Int>>()
    for (i in 0..m) {
        table.add(MutableList(n + 1) { 0 })
    }
    for (i in 1..m)
        for (j in 1..n) {
            if (first[i - 1] == second[j - 1])
                table[i][j] = table[i - 1][j - 1] + 1
            else
                table[i][j] = max(table[i][j - 1], table[i - 1][j])
        }
    var i = m
    var j = n
    val sb = StringBuilder()
    while (i > 0 && j > 0) {
        if (first[i - 1] == second[j - 1]) {
            sb.append(first[i - 1])
            i--
            j--
        } else if (table[i][j - 1] > table[i - 1][j]) {
            j--
        } else {
            i--
        }
    }
    return sb.toString().reversed()
}

/**
 * Наибольшая возрастающая подпоследовательность
 * Сложная
 *
 * Дан список целых чисел, например, [2 8 5 9 12 6].
 * Найти в нём самую длинную возрастающую подпоследовательность.
 * Элементы подпоследовательности не обязаны идти подряд,
 * но должны быть расположены в исходном списке в том же порядке.
 * Если самых длинных возрастающих подпоследовательностей несколько (как в примере),
 * то вернуть ту, в которой числа расположены раньше (приоритет имеют первые числа).
 * В примере ответами являются 2, 8, 9, 12 или 2, 5, 9, 12 -- выбираем первую из них.
 */

// Трудоемкость - O(N^2)
// Ресурсоемкость - O(N)
fun longestIncreasingSubSequence(list: List<Int>): List<Int> {
    val n = list.size
    if (n == 0) return list
    val d = MutableList(n) { 1 }
    val p = MutableList(n) { -1 }

    for (i in 1 until n)
        for (j in 0 until i) {
            if (list[j] < list[i] && d[i] < d[j] + 1) {
                d[i] = d[j] + 1
                p[i] = j
            }
        }

    var ans = d[0]
    var pos = 0
    for (i in 1 until n) {
        if (d[i] > ans) {
            ans = d[i]
            pos = i
        }
    }

    val subseq = mutableListOf<Int>()
    while (pos != -1) {
        subseq.add(list[pos])
        pos = p[pos]
    }
    return subseq.reversed()
}

/**
 * Самый короткий маршрут на прямоугольном поле.
 * Средняя
 *
 * В файле с именем inputName задано прямоугольное поле:
 *
 * 0 2 3 2 4 1
 * 1 5 3 4 6 2
 * 2 6 2 5 1 3
 * 1 4 3 2 6 2
 * 4 2 3 1 5 0
 *
 * Можно совершать шаги длиной в одну клетку вправо, вниз или по диагонали вправо-вниз.
 * В каждой клетке записано некоторое натуральное число или нуль.
 * Необходимо попасть из верхней левой клетки в правую нижнюю.
 * Вес маршрута вычисляется как сумма чисел со всех посещенных клеток.
 * Необходимо найти маршрут с минимальным весом и вернуть этот минимальный вес.
 *
 * Здесь ответ 2 + 3 + 4 + 1 + 2 = 12
 */
fun shortestPathOnField(inputName: String): Int {
    TODO()
}

// Задачу "Максимальное независимое множество вершин в графе без циклов"
// смотрите в уроке 5